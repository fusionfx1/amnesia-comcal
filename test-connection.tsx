"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { CheckCircle, XCircle, Clock, Play, AlertTriangle } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

export default function TestConnection() {
  const [isLoading, setIsLoading] = useState(false)
  const [testResults, setTestResults] = useState<string>("")
  const [connectionStatus, setConnectionStatus] = useState<"idle" | "testing" | "success" | "error">("idle")
  const { toast } = useToast()

  const WEB_APP_URL = "https://script.google.com/macros/s/AKfycbx1ycoCG7IHa5KPMzElhhPGWHUv8yLLX7nflMzqbywUyJfN8ZTrVqY_cHVEBcFKNaqt/exec"

  const addResult = (message: string) => {
    const timestamp = new Date().toLocaleTimeString()
    setTestResults(prev => prev + `[${timestamp}] ${message}\n`)
  }

  const testConnection = async () => {
    setIsLoading(true)
    setConnectionStatus("testing")
    setTestResults("")
    
    addResult("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
    addResult(`üì° URL: ${WEB_APP_URL}`)

    try {
      // Test 1: Basic GET request
      addResult("üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET request...")
      
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 15000)

      const response = await fetch(WEB_APP_URL, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
        signal: controller.signal,
      })

      clearTimeout(timeoutId)
      
      addResult(`üì• Response Status: ${response.status}`)
      
      const responseText = await response.text()
      addResult(`üìÑ Response Text: ${responseText}`)

      if (response.ok) {
        if (responseText.includes("AMNESIA Commission API is working") || 
            responseText.includes("success") || 
            responseText.includes("API")) {
          setConnectionStatus("success")
          addResult("‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
          
          toast({
            title: "‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            description: "Google Apps Script API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥",
          })
        } else {
          setConnectionStatus("error")
          addResult("‚ö†Ô∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á")
        }
      } else {
        setConnectionStatus("error")
        addResult(`‚ùå HTTP Error: ${response.status} ${response.statusText}`)
      }

    } catch (error: any) {
      setConnectionStatus("error")
      
      if (error.name === "AbortError") {
        addResult("‚ùå Request timeout (>15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
      } else if (error.message.includes("NetworkError") || error.message.includes("Failed to fetch")) {
        addResult("‚ùå Network Error - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ")
      } else if (error.message.includes("CORS")) {
        addResult("‚ùå CORS Policy Error")
      } else {
        addResult(`‚ùå Error: ${error.message}`)
      }
      
      toast({
        title: "‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Apps Script",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const testLoadMonths = async () => {
    if (connectionStatus !== "success") {
      toast({
        title: "‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô",
        variant: "destructive",
      })
      return
    }

    addResult("\nüîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏∑‡∏≠‡∏ô...")
    
    try {
      const response = await fetch(`${WEB_APP_URL}?action=load`)
      const responseText = await response.text()
      
      addResult(`üì• Load Months Response: ${responseText}`)
      
      if (response.ok) {
        try {
          const data = JSON.parse(responseText)
          if (Array.isArray(data)) {
            addResult(`‚úÖ ‡∏û‡∏ö ${data.length} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${data.join(", ")}`)
          } else {
            addResult("‚ö†Ô∏è Response ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà array")
          }
        } catch (parseError) {
          addResult(`‚ùå JSON Parse Error: ${parseError}`)
        }
      }
    } catch (error) {
      addResult(`‚ùå Load Months Error: ${error}`)
    }
  }

  const getStatusIcon = () => {
    switch (connectionStatus) {
      case "success":
        return <CheckCircle className="w-5 h-5 text-green-500" />
      case "error":
        return <XCircle className="w-5 h-5 text-red-500" />
      case "testing":
        return <Clock className="w-5 h-5 text-yellow-500 animate-spin" />
      default:
        return <AlertTriangle className="w-5 h-5 text-gray-500" />
    }
  }

  const getStatusBadge = () => {
    switch (connectionStatus) {
      case "success":
        return <Badge className="bg-green-500">‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß</Badge>
      case "error":
        return <Badge variant="destructive">‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</Badge>
      case "testing":
        return <Badge variant="secondary">üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...</Badge>
      default:
        return <Badge variant="outline">‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö</Badge>
    }
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Apps Script
          </CardTitle>
          <CardDescription>
            ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* URL Display */}
          <Card className="bg-blue-50 border-blue-200">
            <CardContent className="pt-6">
              <div className="space-y-2">
                <h3 className="font-semibold text-blue-800">URL ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</h3>
                <code className="text-xs bg-white p-2 rounded border block break-all">
                  {WEB_APP_URL}
                </code>
              </div>
            </CardContent>
          </Card>

          {/* Status */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {getStatusIcon()}
              <span className="font-semibold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
              {getStatusBadge()}
            </div>
          </div>

          {/* Test Buttons */}
          <div className="flex gap-2">
            <Button onClick={testConnection} disabled={isLoading} className="flex items-center gap-2">
              <Play className="w-4 h-4" />
              {isLoading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö..." : "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"}
            </Button>
            
            <Button 
              onClick={testLoadMonths} 
              disabled={isLoading || connectionStatus !== "success"}
              variant="outline"
            >
              ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            </Button>
            
            <Button 
              onClick={() => setTestResults("")} 
              variant="outline"
            >
              ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            </Button>
          </div>

          {/* Results */}
          {testResults && (
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">üìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  value={testResults}
                  readOnly
                  className="min-h-[300px] font-mono text-xs"
                  placeholder="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
                />
              </CardContent>
            </Card>
          )}

          {/* Instructions */}
          <Card className="bg-yellow-50 border-yellow-200">
            <CardContent className="pt-6">
              <h4 className="font-semibold mb-2 text-yellow-800">üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h4>
              <ol className="text-sm space-y-1 list-decimal list-inside text-yellow-700">
                <li>‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API</li>
                <li>‡∏´‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß" ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß</li>
                <li>‡∏ó‡∏î‡∏™‡∏≠‡∏ö "‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà</li>
                <li>‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</li>
              </ol>
            </CardContent>
          </Card>

          {/* Success Message */}
          {connectionStatus === "success" && (
            <Card className="bg-green-50 border-green-200">
              <CardContent className="pt-6">
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-6 h-6 text-green-500" />
                  <div>
                    <h3 className="font-semibold text-green-800">üéâ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
                    <p className="text-sm text-green-700">
                      Google Apps Script ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </CardContent>
      </Card>
    </div>
  )
}